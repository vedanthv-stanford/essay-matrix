// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  graduationYear  Int?
  highSchoolName  String?
  intendedMajor   String?
  intendedMinor   String?
  resumeUrl       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  colleges     College[]
  activities   Activity[]
  essays       Essay[]
  subscription Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model College {
  id        String   @id @default(cuid())
  name      String
  userId    String
  status    String   @default("In Progress")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  essays Essay[]

  @@unique([userId, name])
}

model Activity {
  id                    String   @id @default(cuid())
  title                 String
  type                  String
  organization          String?
  position              String?
  description           String?
  hoursPerWeek          Int?
  weeksPerYear          Int?
  participationGrades   String[] // ["9", "10", "11", "12", "Post-grad"]
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Essay {
  id        String   @id @default(cuid())
  title     String
  prompt    String
  content   String?
  wordCount Int      @default(0)
  collegeId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  college College @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String   @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeCurrentPeriodEnd DateTime?
  plan              String   @default("free") // free, plus, unlimited
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 