// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  graduationYear  Int?
  highSchoolName  String?
  intendedMajor   String?
  intendedMinor   String?
  resumeUrl       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  colleges     College[]
  activities   Activity[]
  essays       Essay[]
  subscription Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model College {
  id            String   @id @default(cuid())
  name          String
  domain        String?
  userId        String
  status        String   @default("In Progress") // In Progress, Applied, Accepted, Rejected, Waitlisted
  location      String?  // City, State
  type          String?  // Public, Private, Liberal Arts, etc.
  acceptanceRate Float?  // Acceptance rate as percentage
  tuition       Int?     // Annual tuition in USD (for private schools)
  tuitionInState Int?    // In-state tuition for public schools
  tuitionOutOfState Int? // Out-of-state tuition for public schools
  enrollment    Int?     // Total enrollment
  website       String?  // College website URL
  notes         String?  // User notes about the college
  priority      Int?     // User's priority ranking (1 = highest)
  deadline      DateTime? // Application deadline
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  essays Essay[]
  essayPrompts EssayPrompt[]

  @@unique([userId, name])
}

model Activity {
  id                    String   @id @default(cuid())
  title                 String
  type                  String
  organization          String?
  position              String?
  description           String?
  hoursPerWeek          Int?
  weeksPerYear          Int?
  participationGrades   String   // Store as JSON string for SQLite compatibility
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Essay {
  id        String   @id @default(cuid())
  title     String
  prompt    String
  content   String?
  wordCount Int      @default(0)
  collegeId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  college College @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EssayPrompt {
  id        String   @id @default(cuid())
  title     String
  prompt    String
  wordLimit Int?
  required  Boolean  @default(true)
  category  String   // Common App, Supplemental, Why This School, Major Specific, Other
  tips      String   // Store as JSON string for SQLite compatibility
  year      String   // Application year (e.g., "2024-2025")
  collegeId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  college College? @relation(fields: [collegeId], references: [id], onDelete: Cascade)

  @@index([collegeId])
  @@index([category])
  @@index([year])
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String   @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeCurrentPeriodEnd DateTime?
  plan              String   @default("free") // free, plus, unlimited
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 